#!/usr/bin/env bash

# If running non-interactively, don't do anything.
[[ $- != *i* ]] && return

# Load utils
_path=$(readlink -n ${BASH_SOURCE[0]} 2> /dev/null)
[[ -z "$_path" ]] && \
    echo "bash_profile must be a link, did you install the dotfiles correctly?" && \
    return
_path=$(dirname $HOME/$_path)
[[ ! -d $_path ]] && echo "$_path should be a directory." && return
source $_path/../lib/utils.sh

# ----------------------------------------------------------------------------- Bash Setup

umask 022 # Set the creation mask, so files created with 644 and dirs as 755

shopt -s checkwinsize # check winsiz after each command and adjust screen automatically,
shopt -s nocaseglob # case insensitive globbing
shopt -s cdspell # Autocorrect typos in path names when using cd
shopt -s histappend # Never overwrite the history file, append to it.
shopt -s cmdhist # always store commands in one line in history

set -o vi # Enable vi mode
set -o noclobber # prevents overwriting files, use >| to override.

bind Space:magic-space # if you type !!<space> the last command will appear.
bind "set completion-ignore-case on" # case-insensitive completion
bind "set show-all-if-ambiguous on" # show all possible matches for weird inputs
bind "set mark-symlinked-directories on" # add a slash to symlinked dirs when completed
bind '"\e[A": history-search-backward' # look commands similar to input on history
bind '"\e[B": history-search-forward'
bind '"\e[C": forward-char'
bind '"\e[D": backward-char'

# ------------------------------------------------------------------ Environment variables

export PATH=$DOTFILES_BIN:/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin
export LC_ALL=en_US.UTF-8
export LANG=$LC_ALL
export PS1='\[\033[49;90m\]\u@\h \[\033[01;34m\]\w\[\033[00m\]\n\$ '
export HISTCONTROL="erasedups:ignoreboth" # remove dupes, ignores spaces and dupes
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear" # ignore these commands
export HISTTIMEFORMAT='%F %T ' # YYYY-MM-DD HH:MM:SS {COMMAND}
export HISTFILESIZE=1000000
export HISTSIZE=$HISTFILESIZE
export PROMPT_DIRTRIM=2 # trim long paths in the prompt

# For reference these are the commands. The following happends for history:
# history-dedupe: node binary I made.
# -a: appends to history-list commmands added since the beggining of the session.
# -c: clears history-list
# -w: write history-list to history-file. (this applies the deduping and ignoring)
# -r: reads history-file and appends it to history list.
export PROMPT_COMMAND="history -a; history -w; $PROMPT_COMMAND"

# All files found on the env folder will be read and set as envars
# This is done to avoid writing confidential data here. (ie. HOMBREBREW_GITHUB_API)
for _f in $(find $DOTFILES_ENV -type f -not -name ".*" -print); do
    export $(basename $_f)="$(cat $_f)"
done

# environment for tools
export FZF_DEFAULT_COMMAND='ag -g ""' # make FZF parse .gitignore .hgignore and svn:ignore
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND" # Same as above but for CtrlT
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"

if isDarwin; then
    _path_brew=$(brew --prefix)
    _path_opt=$_path_brew/opt
    _path_coreutils=$_path_opt/coreutils
    _path_fzf=$_path_opt/fzf

    export PATH=$_path_coreutils/libexec/gnubin:$PATH
    export MANPATH=$_path_coreutils/libexec/gnuman:$MANPATH

    # enable gnu-utils on path
    for _p in $(find -L $_path_opt -name "gnu*" -path "*libexec*" -type d); do
        _sufix=${_p:(-3)}
        [ "$_sufix" == "bin" ] && export PATH=$_p:$PATH
        [ "$_sufix" == "man" ] && export MANPATH=$_p:$MANPATH
    done
fi

# ---------------------------------------------------------------------- Completion & Info

# Append the branchname to PS1 when in git repos
[ -r "$DOTFILES_LIB/gitprompt.sh" ] && source "$DOTFILES_LIB/gitprompt.sh"

eval `dircolors $HOME/.dir_colors` # colorize files by type
[ -f $HOME/.alias ] && source $HOME/.alias # if an alias file exist, load it.
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)" # enable lesspipe

# Add tab completions for SSH hostnames based on $HOME/.ssh/config
[ -f "$HOME/.ssh/config" ] && \
    complete \
        -o "default" \
        -o "nospace" \
        -W "$(grep "^Host" $HOME/.ssh/config | grep -v "[?*]" | cut -d " " -f2- | tr ' ' '\n')" \
        scp sftp ssh;

if isDarwin; then
    # Use bash_completion from brew
    [ -f $_path_brew/etc/bash_completion ] && source $_path_brew/etc/bash_completion

    # Enable Fuzzy Search
    if [ -d "$_path_fzf" ]; then
        source "$_path_fzf/shell/completion.bash"
        source "$_path_fzf/shell/key-bindings.bash"
    fi

    # Enable iterm2's shell integration
    [ -f "$HOME/.iterm2_shell_integration.bash" ] && \
        source "$HOME/.iterm2_shell_integration.bash"
else
    source "/usr/share/fzf/completion.bash"
    source "/usr/share/fzf/key-bindings.bash"
fi

# --------------------------------------------------------- Extra Environment and Managers

if has python; then
    if has pyenv; then
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
    else
        echo "Warning: Pyenv is not installed"
    fi
fi

if has ruby; then
    if [[ -f "$HOME/.rvm/scripts/rvm" ]]; then
        export PATH=$PATH:$HOME/.rvm/bin
        source "$HOME/.rvm/scripts/rvm"
    else
        echo "Warning: RVM is not installed"
    fi
fi

if command -v jenv > /dev/null; then
    eval "$(jenv init -)"
    # set current java version as default
    export JAVA_HOME=$(jenv prefix)
    echo "JAVA: $(jenv version)"
fi

if has rust; then
    if [ -d "$HOME/.cargo/bin" ]; then
        export PATH="$HOME/.cargo/bin:$PATH"
    else
        echo "Warning: Cargo is not installed"
    fi
fi


# Node version manager should be always available.
export NVM_DIR="$HOME/.nvm"
if isDarwin; then
    _path_nvm="$(brew --prefix nvm)"
    _path_nvc="$_path_nvm/etc/bash_completion.d/nvm"
else
    _path_nvm=$(dirname $(readlink -n "$NVM_DIR/nvm.sh"))
    _path_nvc="$_path_nvm/bash_completion"
fi
if [ -d "$_path_nvm" ]; then
    source "$_path_nvm/nvm.sh"
    source "$_path_nvc"
else
    echo "Warning: NVM is not installed"
fi

if isDarwin; then

    # Enable ruby overide
    export PATH=/usr/local/opt/ruby/bin::/usr/local/lib/ruby/gems/2.6.0/bin:$PATH

    # Enable Android tools
    if [ -d $_path_brew/share/android-sdk ]; then
        _tools=(ant maven gradle)
        for _tool in ${_tools[@]}; do
            _TOOL=${_tool^^}
            if [ $(brew --prefix $_tool 2> /dev/null) ]; then
                declare -g ${_TOOL}_HOME=$(brew --prefix $_tool)
                _tmp=${_TOOL}_HOME
                export PATH=$PATH:${!_tmp}/bin
            else
                echo "Warning: $_TOOL is not installed";
            fi
        done
        export ANDROID_HOME="/usr/local/share/android-sdk"
        export ANDROID_NDK_HOME="/usr/local/share/android-ndk"
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        export PATH=$PATH:$ANDROID_HOME/tools
    else
        echo "Warning: Android SDK not installed."
    fi

    # Make visual-code the default editor for react
    has code-insiders && export REACT_EDITOR=code-insiders
fi

# Python Anaconda
# This has coused me some issues with the compiler, disable it to avoid them.
# [ -d /anaconda3/bin ] && export PATH="$PATH:/anaconda3/bin"

if [[ -d ~/Android/Sdk ]]; then
    export ANDROID_SDK_ROOT="$HOME/Android/Sdk"
    export PATH=$ANDROID_SDK_ROOT/platform-tools:$PATH
fi

# Added by Amplify CLI binary installer
export PATH="$HOME/.amplify/bin:$PATH"
