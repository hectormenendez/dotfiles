[core]
    editor = nvim ;code-insiders --wait
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitconfig
    autocrlf = input

[init]
    defaultBranch = main

[merge]
    renamelimit = 9000
    tool = vscode

[diff]
    renameLimit = 6000
    tool = vscode

[push]
    # 'git push' should only do the current branch, not all
    default = current

[pull]
    rebase = true

[advice]
    # No need for hints on status
    statushints = false
    skippedCherryPicks = false

[apply]
    # Remove unnecesary whitespace before commit
    whitespace = strip

[diff]
    prompt = false
    tool = vimdiff

[color]
    ui = true

[color "branch"]
    current = green reverse
    local = yellow
    remote = cyan

[color "diff"]
    whitespace = red reverse
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green
    changed = yellow
    untracked = red

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    required = true
    process = git-lfs filter-process

[alias]
    add = add -v
    cp = cherry-pick
    sm = submodule
    smf = submodule foreach
    su = branch --set-upstream-to
    ca = commit -a --amend -C HEAD --no-edit
    ci = commit -m
    cin = commit --no-verify -m
    co = checkout
    st = status
    stb = branch -vv
    sku = stash -k -u ; stashes unstaged files (even untracked)
    # rebases current branche's remote
    rb = "! f() {\tgit remote update -p;\tgit rebase -r $(git remote)/$(git rev-parse --abbrev-ref HEAD);\tgit st;\t}; f"
    rmb = "! f() { git stb | grep ': gone]' | xargs | cut -d' ' -f1 | xargs git branch -D; }; f"
    ru = remote update -p
    ls = ls-files ; list tracked files
    lsi = ! git status --ignored --porcelain | cut -d' ' -f2 ; list ignored paths
    lss = diff --cached --name-only ; list staged files
    lsm = ls-files --exclude-standard -m ; list modified and unstaged files
    lsu = ls-files --exclude-standard --other ; list untracked files
    # remove untracked files
    cdfx = clean -dfx
    # Removes local branches no longer present in the remote
    # prints current's commit sha
    sha = !sh -c 'git rev-list HEAD | head -n 1'
    # pretty log
    lg = !git log --graph --date=relative --pretty=tformat:'%C(bold blue)%h%C(reset) %C(bold green)%>(8,trunc)%ar%C(reset) %C(bold dim white)%<(8,trunc)%an %<(14,trunc)%ae%C(reset) %C(white)%s%C(reset)%C(auto)%d%C(reset)'
    # log all branches
    lga = !git lg --all
    # alternative pretty-log.
    tree = !git log --graph --date=relative --pretty=tformat:'%>|(18)%C(auto)%h%C(reset)   %C(white)%an <%ae> %C(reset) %C(bold dim white)%ar%C(reset) %C(auto)%d%C(reset)%n %>|(19)%C(dim black)%m%C(reset) %<(60,trunc)%C(dim white)%s%C(reset)%n'
    # Allows to selectively change variables on all commits.
    # Usage example:
    #    git vars GIT_COMMITTER_NAME "old name" "new name"
    vars = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch -f --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
    # easy tag renaming
    rtag = "!f() { git tag $2 $1 && echo Tagged $2 at $1 && git tag -d $1; }; f"

[difftool "vscode"]
    cmd = code-insiders --wait --diff $LOCAL $REMOTE

[mergetool "vscode"]
    cmd = code-insiders --wait $MERGED

[credential]
    helper = /usr/lib/git-core/git-credential-libsecret
